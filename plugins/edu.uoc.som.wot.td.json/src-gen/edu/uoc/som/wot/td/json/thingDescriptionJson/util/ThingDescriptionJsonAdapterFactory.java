/**
 * generated by Xtext 2.17.0
 */
package edu.uoc.som.wot.td.json.thingDescriptionJson.util;

import edu.uoc.som.wot.td.json.thingDescriptionJson.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see edu.uoc.som.wot.td.json.thingDescriptionJson.ThingDescriptionJsonPackage
 * @generated
 */
public class ThingDescriptionJsonAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static ThingDescriptionJsonPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ThingDescriptionJsonAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = ThingDescriptionJsonPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ThingDescriptionJsonSwitch<Adapter> modelSwitch =
    new ThingDescriptionJsonSwitch<Adapter>()
    {
      @Override
      public Adapter caseJsonThing(JsonThing object)
      {
        return createJsonThingAdapter();
      }
      @Override
      public Adapter caseJsonVersionInfo(JsonVersionInfo object)
      {
        return createJsonVersionInfoAdapter();
      }
      @Override
      public Adapter caseJsonSecurityScheme(JsonSecurityScheme object)
      {
        return createJsonSecuritySchemeAdapter();
      }
      @Override
      public Adapter caseJsonPropertyAffordance(JsonPropertyAffordance object)
      {
        return createJsonPropertyAffordanceAdapter();
      }
      @Override
      public Adapter caseJsonActionAffordance(JsonActionAffordance object)
      {
        return createJsonActionAffordanceAdapter();
      }
      @Override
      public Adapter caseJsonEventAffordance(JsonEventAffordance object)
      {
        return createJsonEventAffordanceAdapter();
      }
      @Override
      public Adapter caseJsonDataSchema(JsonDataSchema object)
      {
        return createJsonDataSchemaAdapter();
      }
      @Override
      public Adapter caseJsonLink(JsonLink object)
      {
        return createJsonLinkAdapter();
      }
      @Override
      public Adapter caseJsonForm(JsonForm object)
      {
        return createJsonFormAdapter();
      }
      @Override
      public Adapter caseJsonExpectedResponse(JsonExpectedResponse object)
      {
        return createJsonExpectedResponseAdapter();
      }
      @Override
      public Adapter caseJsonMultiLanguageEntry(JsonMultiLanguageEntry object)
      {
        return createJsonMultiLanguageEntryAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link edu.uoc.som.wot.td.json.thingDescriptionJson.JsonThing <em>Json Thing</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.uoc.som.wot.td.json.thingDescriptionJson.JsonThing
   * @generated
   */
  public Adapter createJsonThingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.uoc.som.wot.td.json.thingDescriptionJson.JsonVersionInfo <em>Json Version Info</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.uoc.som.wot.td.json.thingDescriptionJson.JsonVersionInfo
   * @generated
   */
  public Adapter createJsonVersionInfoAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.uoc.som.wot.td.json.thingDescriptionJson.JsonSecurityScheme <em>Json Security Scheme</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.uoc.som.wot.td.json.thingDescriptionJson.JsonSecurityScheme
   * @generated
   */
  public Adapter createJsonSecuritySchemeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.uoc.som.wot.td.json.thingDescriptionJson.JsonPropertyAffordance <em>Json Property Affordance</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.uoc.som.wot.td.json.thingDescriptionJson.JsonPropertyAffordance
   * @generated
   */
  public Adapter createJsonPropertyAffordanceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.uoc.som.wot.td.json.thingDescriptionJson.JsonActionAffordance <em>Json Action Affordance</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.uoc.som.wot.td.json.thingDescriptionJson.JsonActionAffordance
   * @generated
   */
  public Adapter createJsonActionAffordanceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.uoc.som.wot.td.json.thingDescriptionJson.JsonEventAffordance <em>Json Event Affordance</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.uoc.som.wot.td.json.thingDescriptionJson.JsonEventAffordance
   * @generated
   */
  public Adapter createJsonEventAffordanceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.uoc.som.wot.td.json.thingDescriptionJson.JsonDataSchema <em>Json Data Schema</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.uoc.som.wot.td.json.thingDescriptionJson.JsonDataSchema
   * @generated
   */
  public Adapter createJsonDataSchemaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.uoc.som.wot.td.json.thingDescriptionJson.JsonLink <em>Json Link</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.uoc.som.wot.td.json.thingDescriptionJson.JsonLink
   * @generated
   */
  public Adapter createJsonLinkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.uoc.som.wot.td.json.thingDescriptionJson.JsonForm <em>Json Form</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.uoc.som.wot.td.json.thingDescriptionJson.JsonForm
   * @generated
   */
  public Adapter createJsonFormAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.uoc.som.wot.td.json.thingDescriptionJson.JsonExpectedResponse <em>Json Expected Response</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.uoc.som.wot.td.json.thingDescriptionJson.JsonExpectedResponse
   * @generated
   */
  public Adapter createJsonExpectedResponseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.uoc.som.wot.td.json.thingDescriptionJson.JsonMultiLanguageEntry <em>Json Multi Language Entry</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.uoc.som.wot.td.json.thingDescriptionJson.JsonMultiLanguageEntry
   * @generated
   */
  public Adapter createJsonMultiLanguageEntryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //ThingDescriptionJsonAdapterFactory
