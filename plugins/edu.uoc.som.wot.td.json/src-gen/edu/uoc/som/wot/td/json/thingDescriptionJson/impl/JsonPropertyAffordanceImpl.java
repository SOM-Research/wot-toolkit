/**
 * generated by Xtext 2.17.0
 */
package edu.uoc.som.wot.td.json.thingDescriptionJson.impl;

import edu.uoc.som.wot.td.json.thingDescriptionJson.JsonBoolean;
import edu.uoc.som.wot.td.json.thingDescriptionJson.JsonDataSchema;
import edu.uoc.som.wot.td.json.thingDescriptionJson.JsonForm;
import edu.uoc.som.wot.td.json.thingDescriptionJson.JsonMultiLanguageEntry;
import edu.uoc.som.wot.td.json.thingDescriptionJson.JsonPropertyAffordance;
import edu.uoc.som.wot.td.json.thingDescriptionJson.JsonType;
import edu.uoc.som.wot.td.json.thingDescriptionJson.ThingDescriptionJsonPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Json Property Affordance</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link edu.uoc.som.wot.td.json.thingDescriptionJson.impl.JsonPropertyAffordanceImpl#getId <em>Id</em>}</li>
 *   <li>{@link edu.uoc.som.wot.td.json.thingDescriptionJson.impl.JsonPropertyAffordanceImpl#getObservable <em>Observable</em>}</li>
 *   <li>{@link edu.uoc.som.wot.td.json.thingDescriptionJson.impl.JsonPropertyAffordanceImpl#getLd_type <em>Ld type</em>}</li>
 *   <li>{@link edu.uoc.som.wot.td.json.thingDescriptionJson.impl.JsonPropertyAffordanceImpl#getTitle <em>Title</em>}</li>
 *   <li>{@link edu.uoc.som.wot.td.json.thingDescriptionJson.impl.JsonPropertyAffordanceImpl#getDescription <em>Description</em>}</li>
 *   <li>{@link edu.uoc.som.wot.td.json.thingDescriptionJson.impl.JsonPropertyAffordanceImpl#getTitles <em>Titles</em>}</li>
 *   <li>{@link edu.uoc.som.wot.td.json.thingDescriptionJson.impl.JsonPropertyAffordanceImpl#getDescriptions <em>Descriptions</em>}</li>
 *   <li>{@link edu.uoc.som.wot.td.json.thingDescriptionJson.impl.JsonPropertyAffordanceImpl#getForms <em>Forms</em>}</li>
 *   <li>{@link edu.uoc.som.wot.td.json.thingDescriptionJson.impl.JsonPropertyAffordanceImpl#getUriVariable <em>Uri Variable</em>}</li>
 *   <li>{@link edu.uoc.som.wot.td.json.thingDescriptionJson.impl.JsonPropertyAffordanceImpl#getType <em>Type</em>}</li>
 *   <li>{@link edu.uoc.som.wot.td.json.thingDescriptionJson.impl.JsonPropertyAffordanceImpl#getConst <em>Const</em>}</li>
 *   <li>{@link edu.uoc.som.wot.td.json.thingDescriptionJson.impl.JsonPropertyAffordanceImpl#getUnit <em>Unit</em>}</li>
 *   <li>{@link edu.uoc.som.wot.td.json.thingDescriptionJson.impl.JsonPropertyAffordanceImpl#getEnum <em>Enum</em>}</li>
 *   <li>{@link edu.uoc.som.wot.td.json.thingDescriptionJson.impl.JsonPropertyAffordanceImpl#getReadOnly <em>Read Only</em>}</li>
 *   <li>{@link edu.uoc.som.wot.td.json.thingDescriptionJson.impl.JsonPropertyAffordanceImpl#getWriteOnly <em>Write Only</em>}</li>
 *   <li>{@link edu.uoc.som.wot.td.json.thingDescriptionJson.impl.JsonPropertyAffordanceImpl#getFormat <em>Format</em>}</li>
 *   <li>{@link edu.uoc.som.wot.td.json.thingDescriptionJson.impl.JsonPropertyAffordanceImpl#getOneOf <em>One Of</em>}</li>
 * </ul>
 *
 * @generated
 */
public class JsonPropertyAffordanceImpl extends MinimalEObjectImpl.Container implements JsonPropertyAffordance
{
  /**
   * The default value of the '{@link #getId() <em>Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getId()
   * @generated
   * @ordered
   */
  protected static final String ID_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getId() <em>Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getId()
   * @generated
   * @ordered
   */
  protected String id = ID_EDEFAULT;

  /**
   * The default value of the '{@link #getObservable() <em>Observable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getObservable()
   * @generated
   * @ordered
   */
  protected static final JsonBoolean OBSERVABLE_EDEFAULT = JsonBoolean._FALSE;

  /**
   * The cached value of the '{@link #getObservable() <em>Observable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getObservable()
   * @generated
   * @ordered
   */
  protected JsonBoolean observable = OBSERVABLE_EDEFAULT;

  /**
   * The cached value of the '{@link #getLd_type() <em>Ld type</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLd_type()
   * @generated
   * @ordered
   */
  protected EList<String> ld_type;

  /**
   * The default value of the '{@link #getTitle() <em>Title</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTitle()
   * @generated
   * @ordered
   */
  protected static final String TITLE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTitle() <em>Title</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTitle()
   * @generated
   * @ordered
   */
  protected String title = TITLE_EDEFAULT;

  /**
   * The default value of the '{@link #getDescription() <em>Description</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescription()
   * @generated
   * @ordered
   */
  protected static final String DESCRIPTION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDescription() <em>Description</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescription()
   * @generated
   * @ordered
   */
  protected String description = DESCRIPTION_EDEFAULT;

  /**
   * The cached value of the '{@link #getTitles() <em>Titles</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTitles()
   * @generated
   * @ordered
   */
  protected EList<JsonMultiLanguageEntry> titles;

  /**
   * The cached value of the '{@link #getDescriptions() <em>Descriptions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescriptions()
   * @generated
   * @ordered
   */
  protected EList<JsonMultiLanguageEntry> descriptions;

  /**
   * The cached value of the '{@link #getForms() <em>Forms</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getForms()
   * @generated
   * @ordered
   */
  protected EList<JsonForm> forms;

  /**
   * The cached value of the '{@link #getUriVariable() <em>Uri Variable</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUriVariable()
   * @generated
   * @ordered
   */
  protected EList<JsonDataSchema> uriVariable;

  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final JsonType TYPE_EDEFAULT = JsonType.STRING;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected JsonType type = TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #getConst() <em>Const</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConst()
   * @generated
   * @ordered
   */
  protected static final String CONST_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getConst() <em>Const</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConst()
   * @generated
   * @ordered
   */
  protected String const_ = CONST_EDEFAULT;

  /**
   * The default value of the '{@link #getUnit() <em>Unit</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUnit()
   * @generated
   * @ordered
   */
  protected static final String UNIT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getUnit() <em>Unit</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUnit()
   * @generated
   * @ordered
   */
  protected String unit = UNIT_EDEFAULT;

  /**
   * The cached value of the '{@link #getEnum() <em>Enum</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEnum()
   * @generated
   * @ordered
   */
  protected EList<String> enum_;

  /**
   * The default value of the '{@link #getReadOnly() <em>Read Only</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReadOnly()
   * @generated
   * @ordered
   */
  protected static final JsonBoolean READ_ONLY_EDEFAULT = JsonBoolean._FALSE;

  /**
   * The cached value of the '{@link #getReadOnly() <em>Read Only</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReadOnly()
   * @generated
   * @ordered
   */
  protected JsonBoolean readOnly = READ_ONLY_EDEFAULT;

  /**
   * The default value of the '{@link #getWriteOnly() <em>Write Only</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWriteOnly()
   * @generated
   * @ordered
   */
  protected static final JsonBoolean WRITE_ONLY_EDEFAULT = JsonBoolean._FALSE;

  /**
   * The cached value of the '{@link #getWriteOnly() <em>Write Only</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWriteOnly()
   * @generated
   * @ordered
   */
  protected JsonBoolean writeOnly = WRITE_ONLY_EDEFAULT;

  /**
   * The default value of the '{@link #getFormat() <em>Format</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFormat()
   * @generated
   * @ordered
   */
  protected static final String FORMAT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFormat() <em>Format</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFormat()
   * @generated
   * @ordered
   */
  protected String format = FORMAT_EDEFAULT;

  /**
   * The cached value of the '{@link #getOneOf() <em>One Of</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOneOf()
   * @generated
   * @ordered
   */
  protected EList<JsonDataSchema> oneOf;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected JsonPropertyAffordanceImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ThingDescriptionJsonPackage.Literals.JSON_PROPERTY_AFFORDANCE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getId()
  {
    return id;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setId(String newId)
  {
    String oldId = id;
    id = newId;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__ID, oldId, id));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JsonBoolean getObservable()
  {
    return observable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setObservable(JsonBoolean newObservable)
  {
    JsonBoolean oldObservable = observable;
    observable = newObservable == null ? OBSERVABLE_EDEFAULT : newObservable;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__OBSERVABLE, oldObservable, observable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getLd_type()
  {
    if (ld_type == null)
    {
      ld_type = new EDataTypeEList<String>(String.class, this, ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__LD_TYPE);
    }
    return ld_type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTitle()
  {
    return title;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTitle(String newTitle)
  {
    String oldTitle = title;
    title = newTitle;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__TITLE, oldTitle, title));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDescription()
  {
    return description;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDescription(String newDescription)
  {
    String oldDescription = description;
    description = newDescription;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__DESCRIPTION, oldDescription, description));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<JsonMultiLanguageEntry> getTitles()
  {
    if (titles == null)
    {
      titles = new EObjectContainmentEList<JsonMultiLanguageEntry>(JsonMultiLanguageEntry.class, this, ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__TITLES);
    }
    return titles;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<JsonMultiLanguageEntry> getDescriptions()
  {
    if (descriptions == null)
    {
      descriptions = new EObjectContainmentEList<JsonMultiLanguageEntry>(JsonMultiLanguageEntry.class, this, ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__DESCRIPTIONS);
    }
    return descriptions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<JsonForm> getForms()
  {
    if (forms == null)
    {
      forms = new EObjectContainmentEList<JsonForm>(JsonForm.class, this, ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__FORMS);
    }
    return forms;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<JsonDataSchema> getUriVariable()
  {
    if (uriVariable == null)
    {
      uriVariable = new EObjectContainmentEList<JsonDataSchema>(JsonDataSchema.class, this, ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__URI_VARIABLE);
    }
    return uriVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JsonType getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(JsonType newType)
  {
    JsonType oldType = type;
    type = newType == null ? TYPE_EDEFAULT : newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getConst()
  {
    return const_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConst(String newConst)
  {
    String oldConst = const_;
    const_ = newConst;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__CONST, oldConst, const_));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getUnit()
  {
    return unit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setUnit(String newUnit)
  {
    String oldUnit = unit;
    unit = newUnit;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__UNIT, oldUnit, unit));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getEnum()
  {
    if (enum_ == null)
    {
      enum_ = new EDataTypeEList<String>(String.class, this, ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__ENUM);
    }
    return enum_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JsonBoolean getReadOnly()
  {
    return readOnly;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setReadOnly(JsonBoolean newReadOnly)
  {
    JsonBoolean oldReadOnly = readOnly;
    readOnly = newReadOnly == null ? READ_ONLY_EDEFAULT : newReadOnly;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__READ_ONLY, oldReadOnly, readOnly));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JsonBoolean getWriteOnly()
  {
    return writeOnly;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setWriteOnly(JsonBoolean newWriteOnly)
  {
    JsonBoolean oldWriteOnly = writeOnly;
    writeOnly = newWriteOnly == null ? WRITE_ONLY_EDEFAULT : newWriteOnly;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__WRITE_ONLY, oldWriteOnly, writeOnly));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getFormat()
  {
    return format;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFormat(String newFormat)
  {
    String oldFormat = format;
    format = newFormat;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__FORMAT, oldFormat, format));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<JsonDataSchema> getOneOf()
  {
    if (oneOf == null)
    {
      oneOf = new EObjectContainmentEList<JsonDataSchema>(JsonDataSchema.class, this, ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__ONE_OF);
    }
    return oneOf;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__TITLES:
        return ((InternalEList<?>)getTitles()).basicRemove(otherEnd, msgs);
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__DESCRIPTIONS:
        return ((InternalEList<?>)getDescriptions()).basicRemove(otherEnd, msgs);
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__FORMS:
        return ((InternalEList<?>)getForms()).basicRemove(otherEnd, msgs);
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__URI_VARIABLE:
        return ((InternalEList<?>)getUriVariable()).basicRemove(otherEnd, msgs);
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__ONE_OF:
        return ((InternalEList<?>)getOneOf()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__ID:
        return getId();
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__OBSERVABLE:
        return getObservable();
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__LD_TYPE:
        return getLd_type();
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__TITLE:
        return getTitle();
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__DESCRIPTION:
        return getDescription();
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__TITLES:
        return getTitles();
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__DESCRIPTIONS:
        return getDescriptions();
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__FORMS:
        return getForms();
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__URI_VARIABLE:
        return getUriVariable();
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__TYPE:
        return getType();
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__CONST:
        return getConst();
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__UNIT:
        return getUnit();
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__ENUM:
        return getEnum();
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__READ_ONLY:
        return getReadOnly();
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__WRITE_ONLY:
        return getWriteOnly();
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__FORMAT:
        return getFormat();
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__ONE_OF:
        return getOneOf();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__ID:
        setId((String)newValue);
        return;
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__OBSERVABLE:
        setObservable((JsonBoolean)newValue);
        return;
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__LD_TYPE:
        getLd_type().clear();
        getLd_type().addAll((Collection<? extends String>)newValue);
        return;
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__TITLE:
        setTitle((String)newValue);
        return;
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__DESCRIPTION:
        setDescription((String)newValue);
        return;
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__TITLES:
        getTitles().clear();
        getTitles().addAll((Collection<? extends JsonMultiLanguageEntry>)newValue);
        return;
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__DESCRIPTIONS:
        getDescriptions().clear();
        getDescriptions().addAll((Collection<? extends JsonMultiLanguageEntry>)newValue);
        return;
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__FORMS:
        getForms().clear();
        getForms().addAll((Collection<? extends JsonForm>)newValue);
        return;
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__URI_VARIABLE:
        getUriVariable().clear();
        getUriVariable().addAll((Collection<? extends JsonDataSchema>)newValue);
        return;
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__TYPE:
        setType((JsonType)newValue);
        return;
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__CONST:
        setConst((String)newValue);
        return;
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__UNIT:
        setUnit((String)newValue);
        return;
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__ENUM:
        getEnum().clear();
        getEnum().addAll((Collection<? extends String>)newValue);
        return;
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__READ_ONLY:
        setReadOnly((JsonBoolean)newValue);
        return;
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__WRITE_ONLY:
        setWriteOnly((JsonBoolean)newValue);
        return;
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__FORMAT:
        setFormat((String)newValue);
        return;
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__ONE_OF:
        getOneOf().clear();
        getOneOf().addAll((Collection<? extends JsonDataSchema>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__ID:
        setId(ID_EDEFAULT);
        return;
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__OBSERVABLE:
        setObservable(OBSERVABLE_EDEFAULT);
        return;
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__LD_TYPE:
        getLd_type().clear();
        return;
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__TITLE:
        setTitle(TITLE_EDEFAULT);
        return;
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__DESCRIPTION:
        setDescription(DESCRIPTION_EDEFAULT);
        return;
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__TITLES:
        getTitles().clear();
        return;
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__DESCRIPTIONS:
        getDescriptions().clear();
        return;
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__FORMS:
        getForms().clear();
        return;
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__URI_VARIABLE:
        getUriVariable().clear();
        return;
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__CONST:
        setConst(CONST_EDEFAULT);
        return;
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__UNIT:
        setUnit(UNIT_EDEFAULT);
        return;
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__ENUM:
        getEnum().clear();
        return;
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__READ_ONLY:
        setReadOnly(READ_ONLY_EDEFAULT);
        return;
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__WRITE_ONLY:
        setWriteOnly(WRITE_ONLY_EDEFAULT);
        return;
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__FORMAT:
        setFormat(FORMAT_EDEFAULT);
        return;
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__ONE_OF:
        getOneOf().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__ID:
        return ID_EDEFAULT == null ? id != null : !ID_EDEFAULT.equals(id);
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__OBSERVABLE:
        return observable != OBSERVABLE_EDEFAULT;
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__LD_TYPE:
        return ld_type != null && !ld_type.isEmpty();
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__TITLE:
        return TITLE_EDEFAULT == null ? title != null : !TITLE_EDEFAULT.equals(title);
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__DESCRIPTION:
        return DESCRIPTION_EDEFAULT == null ? description != null : !DESCRIPTION_EDEFAULT.equals(description);
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__TITLES:
        return titles != null && !titles.isEmpty();
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__DESCRIPTIONS:
        return descriptions != null && !descriptions.isEmpty();
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__FORMS:
        return forms != null && !forms.isEmpty();
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__URI_VARIABLE:
        return uriVariable != null && !uriVariable.isEmpty();
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__TYPE:
        return type != TYPE_EDEFAULT;
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__CONST:
        return CONST_EDEFAULT == null ? const_ != null : !CONST_EDEFAULT.equals(const_);
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__UNIT:
        return UNIT_EDEFAULT == null ? unit != null : !UNIT_EDEFAULT.equals(unit);
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__ENUM:
        return enum_ != null && !enum_.isEmpty();
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__READ_ONLY:
        return readOnly != READ_ONLY_EDEFAULT;
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__WRITE_ONLY:
        return writeOnly != WRITE_ONLY_EDEFAULT;
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__FORMAT:
        return FORMAT_EDEFAULT == null ? format != null : !FORMAT_EDEFAULT.equals(format);
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE__ONE_OF:
        return oneOf != null && !oneOf.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (id: ");
    result.append(id);
    result.append(", observable: ");
    result.append(observable);
    result.append(", ld_type: ");
    result.append(ld_type);
    result.append(", title: ");
    result.append(title);
    result.append(", description: ");
    result.append(description);
    result.append(", type: ");
    result.append(type);
    result.append(", const: ");
    result.append(const_);
    result.append(", unit: ");
    result.append(unit);
    result.append(", enum: ");
    result.append(enum_);
    result.append(", readOnly: ");
    result.append(readOnly);
    result.append(", writeOnly: ");
    result.append(writeOnly);
    result.append(", format: ");
    result.append(format);
    result.append(')');
    return result.toString();
  }

} //JsonPropertyAffordanceImpl
