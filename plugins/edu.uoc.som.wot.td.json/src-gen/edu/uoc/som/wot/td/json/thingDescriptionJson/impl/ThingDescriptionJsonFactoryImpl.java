/**
 * generated by Xtext 2.17.0
 */
package edu.uoc.som.wot.td.json.thingDescriptionJson.impl;

import edu.uoc.som.wot.td.json.thingDescriptionJson.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ThingDescriptionJsonFactoryImpl extends EFactoryImpl implements ThingDescriptionJsonFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static ThingDescriptionJsonFactory init()
  {
    try
    {
      ThingDescriptionJsonFactory theThingDescriptionJsonFactory = (ThingDescriptionJsonFactory)EPackage.Registry.INSTANCE.getEFactory(ThingDescriptionJsonPackage.eNS_URI);
      if (theThingDescriptionJsonFactory != null)
      {
        return theThingDescriptionJsonFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new ThingDescriptionJsonFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ThingDescriptionJsonFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case ThingDescriptionJsonPackage.JSON_THING: return createJsonThing();
      case ThingDescriptionJsonPackage.JSON_VERSION_INFO: return createJsonVersionInfo();
      case ThingDescriptionJsonPackage.JSON_SECURITY_SCHEME: return createJsonSecurityScheme();
      case ThingDescriptionJsonPackage.JSON_PROPERTY_AFFORDANCE: return createJsonPropertyAffordance();
      case ThingDescriptionJsonPackage.JSON_ACTION_AFFORDANCE: return createJsonActionAffordance();
      case ThingDescriptionJsonPackage.JSON_EVENT_AFFORDANCE: return createJsonEventAffordance();
      case ThingDescriptionJsonPackage.JSON_DATA_SCHEMA: return createJsonDataSchema();
      case ThingDescriptionJsonPackage.JSON_LINK: return createJsonLink();
      case ThingDescriptionJsonPackage.JSON_FORM: return createJsonForm();
      case ThingDescriptionJsonPackage.JSON_EXPECTED_RESPONSE: return createJsonExpectedResponse();
      case ThingDescriptionJsonPackage.JSON_MULTI_LANGUAGE_ENTRY: return createJsonMultiLanguageEntry();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case ThingDescriptionJsonPackage.JSON_BOOLEAN:
        return createJsonBooleanFromString(eDataType, initialValue);
      case ThingDescriptionJsonPackage.JSON_TYPE:
        return createJsonTypeFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case ThingDescriptionJsonPackage.JSON_BOOLEAN:
        return convertJsonBooleanToString(eDataType, instanceValue);
      case ThingDescriptionJsonPackage.JSON_TYPE:
        return convertJsonTypeToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JsonThing createJsonThing()
  {
    JsonThingImpl jsonThing = new JsonThingImpl();
    return jsonThing;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JsonVersionInfo createJsonVersionInfo()
  {
    JsonVersionInfoImpl jsonVersionInfo = new JsonVersionInfoImpl();
    return jsonVersionInfo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JsonSecurityScheme createJsonSecurityScheme()
  {
    JsonSecuritySchemeImpl jsonSecurityScheme = new JsonSecuritySchemeImpl();
    return jsonSecurityScheme;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JsonPropertyAffordance createJsonPropertyAffordance()
  {
    JsonPropertyAffordanceImpl jsonPropertyAffordance = new JsonPropertyAffordanceImpl();
    return jsonPropertyAffordance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JsonActionAffordance createJsonActionAffordance()
  {
    JsonActionAffordanceImpl jsonActionAffordance = new JsonActionAffordanceImpl();
    return jsonActionAffordance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JsonEventAffordance createJsonEventAffordance()
  {
    JsonEventAffordanceImpl jsonEventAffordance = new JsonEventAffordanceImpl();
    return jsonEventAffordance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JsonDataSchema createJsonDataSchema()
  {
    JsonDataSchemaImpl jsonDataSchema = new JsonDataSchemaImpl();
    return jsonDataSchema;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JsonLink createJsonLink()
  {
    JsonLinkImpl jsonLink = new JsonLinkImpl();
    return jsonLink;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JsonForm createJsonForm()
  {
    JsonFormImpl jsonForm = new JsonFormImpl();
    return jsonForm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JsonExpectedResponse createJsonExpectedResponse()
  {
    JsonExpectedResponseImpl jsonExpectedResponse = new JsonExpectedResponseImpl();
    return jsonExpectedResponse;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JsonMultiLanguageEntry createJsonMultiLanguageEntry()
  {
    JsonMultiLanguageEntryImpl jsonMultiLanguageEntry = new JsonMultiLanguageEntryImpl();
    return jsonMultiLanguageEntry;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JsonBoolean createJsonBooleanFromString(EDataType eDataType, String initialValue)
  {
    JsonBoolean result = JsonBoolean.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertJsonBooleanToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JsonType createJsonTypeFromString(EDataType eDataType, String initialValue)
  {
    JsonType result = JsonType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertJsonTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ThingDescriptionJsonPackage getThingDescriptionJsonPackage()
  {
    return (ThingDescriptionJsonPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static ThingDescriptionJsonPackage getPackage()
  {
    return ThingDescriptionJsonPackage.eINSTANCE;
  }

} //ThingDescriptionJsonFactoryImpl
